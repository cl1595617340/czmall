<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bdqn.springboot.dao.GoodsMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.bdqn.springboot.entity.Goods">
        <id column="goods_id" property="goodsId" />
        <result column="goods_type3_id" property="goodsType3Id" />
        <result column="goods_name" property="goodsName" />
        <result column="goods_describe" property="goodsDescribe" />
        <result column="goods_repertory" property="goodsRepertory" />
        <result column="goods_info" property="goodsInfo" />
        <result column="goods_explain" property="goodsExplain" />
        <result column="goods_create" property="goods_create" />
        <result column="goods_state" property="goods_state" />
        <result column="goods_title" property="goods_title" />

        <result column="goods_loans" property="goods_loans" />
        <result column="goods_oldToNew" property="goods_oldToNew" />
        <result column="goods_complimentary" property="goods_complimentary" />
        <!-- 1对1的3级分类 -->
        <association property="goodstype3" javaType="com.bdqn.springboot.entity.Goodstype3">
            <id column="g3_id" property="goodstype3Id" />
            <result column="g3_name" property="goodstype3Name" />
        </association>

        <!-- 1对1的参数 -->
        <association property="parameter" javaType="com.bdqn.springboot.entity.Parameter">
            <id column="parameter_id" property="parameterId" />
            <result column="goods_id" property="goods_id" />
            <result column="parameter_height" property="parameterHeight" />
            <result column="parameter_height" property="parameterHeight" />
            <result column="parameter_width" property="parameterWidth" />
            <result column="parameter_thickness" property="parameterThickness" />
            <result column="parameter_weight" property="parameterWeight" />
            <result column="parameter_showtime" property="parameterShowtime" />
            <result column="parameter_cpu" property="parameterCpu" />
            <result column="parameter_cpunum" property="parameterCpunum" />
            <result column="parameter_store" property="parameterStore" />
            <result column="parameter_cell" property="parameterCell" />
            <result column="parameter_size" property="parameterSize" />
            <result column="parameter_distinguishability" property="parameterDistinguishability" />
            <result column="parameter_touch" property="parameterTouch" />
            <result column="parameter_frontpixel" property="parameterFrontpixel" />
            <result column="parameter_laterNumcameras" property="parameterLaternumcameras" />
            <result column="parameter_laterflashlight" property="parameterLaterflashlight" />
            <result column="parameter_autofocusing" property="parameterAutofocusing" />
            <result column="parameter_recmode" property="parameterRecmode" />
            <result column="parameter_musicplayer" property="parameterMusicplayer" />
            <result column="parameter_MP3ringtone" property="parameterMp3ringtone" />
            <result column="parameter_fingerprintRecognition" property="parameterFingerprintrecognition" />
            <result column="parameter_OS" property="parameterOs" />
            <result column="parameter_networkType" property="parameterNetworktype" />
            <result column="parameter_neworkinstructions" property="parameterNeworkinstructions" />
            <result column="parameter_WLAN" property="parameterWlan" />
            <result column="parameter_Bluetooth" property="parameterBluetooth" />
            <result column="parameter_OTG" property="parameterOtg" />
            <result column="parameter_GravitySensor" property="parameterGravitysensor" />
            <result column="parameter_PhotosensitiveSensor" property="parameterPhotosensitivesensor" />
            <result column="parameter_sns" property="parameterSns" />
            <result column="parameter_movieandtv" property="parameterMovieandtv" />
            <result column="parameter_tools" property="parameterTools" />
            <result column="parameter_live" property="parameterLive" />

            <result column="parameter_screen" property="parameter_screen" />
        </association>

        <collection property="versionsList" ofType="com.bdqn.springboot.entity.Versions" column="goods_id" select="getVersions"/>

        <collection property="goodscolorList" ofType="com.bdqn.springboot.entity.Goodscolor" column="goods_id" select="getGoodscolor"/>

    </resultMap>

    <!-- 通用查询映射结果getVersions -->
    <resultMap id="BaseResultMap2" type="com.bdqn.springboot.entity.Versions">
        <id column="versions_id" property="versionsId" />
        <result column="goods_id" property="goodsId" />
        <result column="versions_name" property="versionsName" />
        <result column="versions_price" property="versionsPrice" />

        <result column="versions_tab" property="versions_tab" />
    </resultMap>
    <!-- 通用查询映射结果getGoodscolor -->
    <resultMap id="BaseResultMap3" type="com.bdqn.springboot.entity.Goodscolor">
        <id column="goodscolor_id" property="goodscolorId" />
        <result column="goods_id" property="goodsId" />
        <result column="goodscolor_name" property="goodscolorName" />
        <result column="goodscolor_picture" property="goodscolorPicture" />

        <result column="goodscolor_linearS" property="goodscolor_linearS" />
        <result column="goodscolor_linearE" property="goodscolor_linearE" />
    </resultMap>

    <select id="getVersions" resultMap="BaseResultMap2">
SELECT * FROM versions v WHERE v.goods_id = #{id}
    </select>

    <select id="getGoodscolor" resultMap="BaseResultMap3">
SELECT * FROM goodscolor c WHERE c.goods_id = #{id}
    </select>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        goods_id, goods_type3_id, goods_name, goods_describe, goods_repertory, goods_info, goods_explain
    </sql>

    <select id="getGoodsList" resultMap="BaseResultMap">
        SELECT gs.*,g3.goodstype3_id g3_id,g3.goodstype3_name g3_name,p.* FROM goods gs
        /*   SELECT gs.*,v.versions_id v_id,v.versions_name v_name,v.versions_price v_price,c.goodscolor_id c_id,c.goodscolor_name c_name,c.goodscolor_picture c_img,g3.goodstype3_id g3_id,g3.goodstype3_name g3_name FROM goods gs
        left JOIN versions v ON (v.goods_id = gs.goods_id)
        left JOIN goodscolor c ON (c.goods_id =gs.goods_id)*/
        JOIN goodstype3 g3 ON (gs.goods_type3_id = g3.goodstype3_id)
        LEFT JOIN parameter p ON(p.goods_id = gs.goods_id)
        <where>
            <if test="goods.strartDate!=null and goods.strartDate!='' and goods.endDate!=null and goods.endDate!=''">
                AND goods_create BETWEEN #{goods.strartDate} AND #{goods.endDate}
            </if>
            <if test="goods.goodsType3Id!=null">
                AND goods_type3_id = #{goods.goodsType3Id}
            </if>
            <if test="goods.goodsName!=null and goods.goodsName!=''">
                and (gs.goods_name like concat('%',#{goods.goodsName},'%') or gs.goods_describe like concat('%',#{goods.goodsName},'%'))
            </if>

        </where>

    </select>


    <update id="updateGodosState">
        update goods
        <set>
            <if test="state!=null">
                goods_state = ${state},
            </if>
        </set>
        where goods_id in
        <foreach item="ids" collection="ids" index="no" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </update>


    <select id="Versionslist" resultMap="BaseResultMap2">
SELECT * FROM versions WHERE goods_id = #{goodsId}
    </select>

    <select id="GoodscolorlistById" resultMap="BaseResultMap3">
SELECT * FROM goodscolor WHERE goods_id = #{goodsId}
    </select>


    <!--================================================前端的商品接口方法==============-->
    <!--这里是第三步得到步骤2得到的数据条数，再分页-->
    <select id="f_getGoodsListToType" resultMap="BaseResultMap">
        SELECT * FROM goods gs
        JOIN goodscolor c ON(c.goods_id = gs.goods_id)
        JOIN versions v ON(v.goods_id = gs.goods_id)
        JOIN parameter p ON(p.goods_id = gs.goods_id)
        <where>
            and gs.goods_state = 0
            <if test="laterNumcameras!=null and laterNumcameras!=''">
                AND p.parameter_laterNumcameras = #{laterNumcameras}
            </if>
            <if test="cell!=''">
                AND p.parameter_cell > #{cell}
            </if>
            <if test="cpunum!=null and cpunum!=''">
                AND p.parameter_cpunum = #{cpunum}
            </if>
            <if test="screen!=null and screen!=''">
                AND p.parameter_screen = #{screen}
            </if>
            <if test="tab !=null and tab !=''">
                AND v.versions_tab = #{tab}
            </if>

            <if test="startslider !=null and endslider !=''">
                AND v.versions_price &gt;= #{startslider}   AND v.versions_price &lt;=  #{endslider}
            </if>
        </where>
        LIMIT #{statrPage},#{endPage}
    </select>

    <!--/*下面是1对多的接口方法*/-->
    <!--/*1,查出分页数量的物品id*/-->
    <select id="page_getGoodsID" resultType="com.bdqn.springboot.entity.Goods">
SELECT * FROM goods
  WHERE  goods_state = 0
 LIMIT #{statrPage},#{endPage}
    </select>

   <!-- /*2,查出物品完整连表的数据条数,根据分页数量计算&#45;&#45;(物品的总数)&#45;&#45;,物品id是由步骤1得来的*/-->
    <select id="page_getGoodsSum" resultType="int">
    SELECT COUNT(1) FROM goods gs
JOIN goodscolor c ON(c.goods_id = gs.goods_id)
JOIN versions v ON(v.goods_id = gs.goods_id)
JOIN parameter p ON(p.goods_id = gs.goods_id)
 WHERE 1=1
 AND gs.goods_id = #{id}
    </select>



    <select id="f_likeGetGoods" resultMap="BaseResultMap">
     SELECT * FROM goods gs
LEFT JOIN goodscolor c ON(c.goods_id = gs.goods_id)
LEFT JOIN versions v ON(v.goods_id = gs.goods_id)
LEFT JOIN parameter p ON(p.goods_id = gs.goods_id)
LEFT JOIN goodstype3 g3 ON(gs.goods_type3_id = g3.goodstype3_id)
<where>
    and gs.goods_state = 0
    <if test="name!=null and name!=''">
        AND gs.`goods_name` LIKE CONCAT('%',#{name},'%')
    </if>
    <if test="type!=null and type!=''">
        AND  g3.goodstype3_name  = #{type}
    </if>
</where>
    </select>

    <select id="f_likeGetGoodsNot" resultMap="BaseResultMap">
        SELECT * FROM goods gs
        LEFT JOIN goodscolor c ON(c.goods_id = gs.goods_id)
        LEFT JOIN versions v ON(v.goods_id = gs.goods_id)
        LEFT JOIN parameter p ON(p.goods_id = gs.goods_id)
        LEFT JOIN goodstype3 g3 ON(gs.goods_type3_id = g3.goodstype3_id)
        <where>
            and gs.goods_state = 0
            <if test="name!=null and name!=''">
                AND gs.`goods_name` LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="type!=null and type!=''">
                AND NOT  g3.goodstype3_name  = #{type}
            </if>
        </where>
    </select>

   <!-- /*4表查询手机的参数信息*/-->
    <select id="f_getParameterinfo" resultMap="BaseResultMap">
  SELECT * FROM goods gs
LEFT JOIN goodscolor c ON(c.goods_id = gs.goods_id)
LEFT JOIN versions v ON(v.goods_id = gs.goods_id)
LEFT JOIN parameter p ON(p.goods_id = gs.goods_id)
WHERE gs.goods_id = #{id}
    </select>


    <!--点击一级分类显示旗下的所有手机-->
    <select id="f_typeGoods" resultMap="BaseResultMap">
  SELECT * FROM goodstype g1
JOIN goodstype2 g2 ON (g2.goodstype_id = g1.goodstype_id)
JOIN goodstype3 g3 ON (g3.goodstype2_id = g2.goodstype2_id)
JOIN goods gs ON (gs.goods_type3_id = g3.goodstype3_id)
JOIN goodscolor gc ON (gc.goods_id = gs.goods_id)
JOIN versions v ON (v.goods_id = gs.goods_id)
WHERE 1=1
AND g1.goodstype_id = #{id}
AND gs.goods_state = 0
    </select>

   <!-- /*3.1根据3级分类id查询旗下的所有商品*/-->
    <select id="f_type3Goods" resultMap="BaseResultMap">
  SELECT * FROM goodstype g1
JOIN goodstype2 g2 ON (g2.goodstype_id = g1.goodstype_id)
JOIN goodstype3 g3 ON (g3.goodstype2_id = g2.goodstype2_id)
JOIN goods gs ON (gs.goods_type3_id = g3.goodstype3_id)
JOIN goodscolor gc ON (gc.goods_id = gs.goods_id)
JOIN versions v ON (v.goods_id = gs.goods_id)
WHERE 1=1
AND g3.goodstype3_id = #{id}
AND gs.goods_state = 0
    </select>



    <!--主页手机的分类放进redis缓存-->
    <select id="getGoodsByTypeipone" resultMap="BaseResultMap">
    SELECT * FROM goods gs
JOIN goodstype3 g3 ON (gs.`goods_type3_id` = g3.`goodstype3_id`)
WHERE gs.goods_state = 0 AND g3.`goodstype3_name`='手机' LIMIT 0,6
    </select>
</mapper>
